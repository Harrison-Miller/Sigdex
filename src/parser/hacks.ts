// this file contains hacks for the parsing process
// basically accounting for exceptions that are too complex/annoying to handle generically in the main parser logic

import { BattleProfile } from "./models/battleProfile";
import type { Game } from "./models/game";

type ParserHack = (game: Game) => void;

export const parserHacks: ParserHack[] = [
	markBigWaaaghAsArmyOfRenown,
	addManifestationsToThryxRoR,
	makeDuardinAscendantArmyOfRenown,
	markLegendsArmiesUnitsAsLegends,
	addAutoEndrinBattleprofile,
	removeTruebladeDescription,
	addSteelhelmsNotes,
];

function markBigWaaaghAsArmyOfRenown(game: Game) {
	const bigWaaagh = game.armies.get('Big Waaagh!');
	if (bigWaaagh) {
		bigWaaagh.isArmyOfRenown = true;
	}
}

function addManifestationsToThryxRoR(game: Game) {
	const thryxRoR = game.regimentsOfRenown.get('The Coven of Thryx');
	if (thryxRoR) {
		thryxRoR.units.set('Burning Sigil of Tzeentch', 1);
		thryxRoR.units.set('Tome of Eyes', 1);
		thryxRoR.units.set('Daemonic Simulacrum', 1);
	}
}

function makeDuardinAscendantArmyOfRenown(game: Game) {
	const duardinAscendant = game.armies.get("The Duardin Ascendant");
	if (duardinAscendant) {
		duardinAscendant.isArmyOfRenown = true;
	}
}

// Some legends armies have many units that are not marked as legends themselves but should be treated as legends
// sometimes they share units with current armies, so we need to figure out which ones only exist in legends armies
// and mark those units as legends
function markLegendsArmiesUnitsAsLegends(game: Game) {
	const nonLegendsArmies = Array.from(game.armies.values()).filter(army => !army.legends);

	for (const army of game.armies.values()) {
		if (army.legends) {
			for (const profile of army.battleProfiles.values()) {
				if (profile.legends) continue; // skip if already marked as legends

				// if exists in a non-legends army skip it otherwise mark it as legends
				if (nonLegendsArmies.some(nonLegendsArmy => nonLegendsArmy.battleProfiles.has(profile.name))) {
					continue;
				}

				// update bp
				profile.legends = true;
				if (!profile.keywords.includes('LEGENDS')) {
					profile.keywords.push('LEGENDS');
				}

				// update unit data in game
				const unitData = game.units.get(profile.name);
				if (unitData) {
					unitData.legends = true;
					if (!unitData.keywords.includes('LEGENDS')) {
						unitData.keywords.push('LEGENDS');
					}
				}
			}
		}
		army.recalculateUnitList(); // recalculate unit list to ensure legends units are included
	}
}

function addAutoEndrinBattleprofile(game: Game) {
	const autoEndrin = game.units.get('Auto-Endrin');
	if (autoEndrin) {
		const dock = game.units.get('Zontari Endrin Dock');
		if (dock) {
			dock.subUnits.push(autoEndrin.name);
		}

		const bp = new BattleProfile({
			name: autoEndrin.name,
			category: autoEndrin.category,
			keywords: autoEndrin.keywords,
			legends: false,
			points: 0,
			reinforceable: false,
		});

		const ko = game.armies.get('Kharadron Overlords'); // TODO: do this for AoRs
		if (ko) {
			ko.battleProfiles.set(bp.name, bp);
			ko.unitList.get(bp.category)?.push({
				name: bp.name,
				points: 0,
				legends: false,
				keywords: bp.keywords,
			});
		}

		// add to an aors
		const aorNames = ko?.armiesOfRenown || [];
		for (const aorName of aorNames) {
			const aor = game.armies.get(aorName);
			if (!aor) continue;
			aor.battleProfiles.set(bp.name, bp);
			aor.unitList.get(bp.category)?.push({
				name: bp.name,
				points: 0,
				legends: false,
				keywords: bp.keywords,
			});
		}

		ko?.recalculateUnitList();
	}
}

// the true blade decription is just the weapon options which is already generated by the parser
function removeTruebladeDescription(game: Game) {
	const trueblade = game.units.get('Askurgan Trueblades');
	if (trueblade) {
		trueblade.descriptions = [];
	}
}

function addSteelhelmsNotes(game: Game) {
	const steelhelms = game.units.get('Freeguild Steelhelms');
	if (steelhelms) {
		steelhelms.descriptions.push('This unit\'s musician and standard bearer are the same model.');
	}
}